*** 1. Curriculum Overview ***
### Lecture Overview: Building APIs with Python and FastAPI

**Prerequisites:**

* Basic understanding of Python is helpful.
* Relevant advanced concepts such as type hinting, decorators, and context managers will be introduced as needed.

**Learning Tips:**

* Adjust video playback speed to match your learning pace (recommended not below 1x).

---

### Course Structure and Topics

1. **Fundamentals of APIs and RESTful Design**

   * What APIs are and principles of RESTful API design.
   * Why FastAPI is a strong choice for building APIs in Python.

2. **FastAPI Basics**

   * Defining endpoints.
   * Understanding path and query parameters.
   * Handling different HTTP methods.
   * Validating request and response data using Pydantic models.

3. **Databases and SQL**

   * Introduction to SQL databases and core SQL concepts.
   * Understanding tables, columns, rows, and basic SQL queries.
   * Importance of SQL knowledge even if not writing raw queries directly.
   * Using Python database models to represent tables.
   * Managing database connections via FastAPIâ€™s dependency injection.

4. **Asynchronous Programming in Python**

   * Writing async functions and awaiting coroutines.

5. **Project Structure and Code Organization**

   * Organizing related endpoints using FastAPI routers.
   * Separating Pydantic and database models into maintainable modules and packages.
   * Separating database interaction logic from endpoint logic into service layers.

6. **User Authentication Flow (OAuth2)**

   * Implementing user signup, email validation, login, password reset, and logout.

7. **Advanced Database Topics**

   * Defining relationships between tables.
   * Managing database schema changes over time using Alembic.

8. **Notifications**

   * Sending emails or SMS notifications for events such as account verification, shipment updates, and user feedback.

9. **Custom Responses**

   * Returning JSON data.
   * Rendering HTML pages using Jinja2 templates directly from the API.

10. **Advanced API Concepts**

    * Error handling.
    * Creating API middlewares.
    * Improving API documentation.
    * Writing endpoint tests using Pytest.
    * Running background tasks efficiently with Celery.

11. **Deployment**

    * Packaging and running the API using Docker and Docker Compose.

12. **Bonus Topics**

    * Auto-generating client-side code from API specifications.
    * Building a simple React frontend to interact with the backend API.

---


*** 2. What are REST APIs? ***

### Understanding APIs and RESTful APIs

**What is an API?**

* API (Application Programming Interface) enables communication between a client and a server.
* Example: Checking shipment status on a website by entering a tracking ID.
* APIs allow programs to request data from servers directly using code, without a user interface.

**REST (Representational State Transfer):**

* A popular approach for designing APIs.
* Provides guidelines and rules on how APIs should be designed and behave.

---

### Key Concepts of RESTful APIs

1. **Endpoints (URI):**

   * Specific addresses on the server where requests are sent.
   * Example: `/shipment` endpoint for shipment status.

2. **Client and Server:**

   * Client: The program sending the API request.
   * Server: The machine receiving, processing the request, and sending the response.

3. **HTTP Methods:**

   * Common methods:

     * `GET`: Read data.
     * `POST`: Create new data.
     * `PUT`: Update existing data.
     * `DELETE`: Remove data.
   * The method indicates the action the client wants to perform on the resource.

4. **Request Components:**

   * **Headers:** Metadata such as data format or authentication info (key-value pairs).
   * **Body:** Data sent to the server, often in JSON format (key-value pairs).

     * Example: Sending a tracking ID in the request body to get shipment details.

---

### API Response

1. **Status Codes:**

   * Indicate the result of the request.
   * Examples:

     * `200 OK`: Successful request.
     * `400 Bad Request`: Client sent invalid data.
     * `404 Not Found`: Requested endpoint does not exist.
     * `500 Internal Server Error`: Server encountered an error.
   * Status code ranges:

     * 200s: Success
     * 300s: Redirection
     * 400s: Client errors
     * 500s: Server errors

2. **Response Components:**

   * **Headers:** Information about the server or data format.
   * **Body:** The actual data requested, usually in JSON format.

     * Example: Shipment status details.

---

### Summary

* APIs enable programmatic communication between client and server.
* REST is a standard for designing APIs with defined endpoints, HTTP methods, and structured requests and responses.
* Clients send requests with methods, headers, and bodies; servers respond with status codes, headers, and data.
* RESTful APIs follow these principles to ensure consistent and predictable interactions.

---
